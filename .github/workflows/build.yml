name: Build

on:
  push:
    branches:
      - develop
      - rel-*
      - release-*
      - github-actions-*
    tags:
      - v*
  pull_request:
    types: [opened, synchronize]
    branches:
      - develop
      - rel-*
      - release-*

jobs:
  build:
    runs-on: ubuntu-18.04
    steps:
      - name: Clone fiftyone
        uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          pip install --upgrade pip setuptools wheel
      - name: Build wheel
        run: |
          python setup.py bdist_wheel
      - name: Upload wheel
        uses: actions/upload-artifact@v2
        with:
          name: wheel
          path: dist/*.whl
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Clone fiftyone
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Check tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          python .github/tools/check-setup-version.py setup.py $(echo ${{ github.ref }} | sed 's/refs\/tags\/v//')

  test:
    runs-on: ${{ matrix.os }}
    needs: [build, check]
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-18.04
          - windows-latest
        python-version:
          - 3.5
          - 3.8
        exclude:
          - os: windows-latest
            python-version: 3.5
    defaults:
      run:
        shell: bash
    steps:
      - name: Clone fiftyone
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install pip dependencies
        # use `python -m pip` to work around Windows permission issues when
        # upgrading pip
        run: |
          python -m pip install --upgrade pip setuptools wheel
          mkdir -p pip-cache
          echo "PIP_CACHE_DIR=pip-cache" >> $GITHUB_ENV
      - name: Fetch pip cache
        uses: actions/cache@v2
        with:
          path: pip-cache
          key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-${{ hashFiles('requirements/*.txt') }}
            pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py') }}-
            pip-${{ runner.os }}-${{ matrix.python-version }}-
      - name: Download fiftyone wheel
        uses: actions/download-artifact@v2
        with:
          name: wheel
          path: downloads
      - name: Fetch DB cache
        uses: actions/cache@v2
        with:
          key: db-${{ runner.os }}-${{ hashFiles('package/db/setup.py') }}
          path: package/db/cache/
      # install prod versions of fiftyone-db and fiftyone-gui from source - this
      # allows the build to succeed if requirements for those packages have been
      # bumped but they have not been published yet
      - name: Install fiftyone-db
        working-directory: package/db
        run: |
          python setup.py bdist_wheel
          pip install dist/*.whl
      - name: Install fiftyone-gui stub
        working-directory: package/gui
        run: |
          if [[ ${{ matrix.os }} = windows-* ]]; then
            ext=exe
          else
            ext=AppImage
          fi
          cp -v "$(which true)" ./FiftyOne-stub.${ext}
          export FIFTYONE_GUI_EXE_PATH=./FiftyOne-stub.${ext}
          python setup.py bdist_wheel
          pip install dist/*.whl
      - name: Install fiftyone
        env:
          PIP_INDEX_URL: https://voxel51-ci@pypi.voxel51.com
        run: |
          pip install -e . fiftyone-brain
      # upgrade voxel51-eta to the latest pre-release (can't use the same
      # strategy as fiftyone-db/gui above because it's in a different repo).
      # Release branches and tags are excluded to force a proper compatible ETA
      # release to be published first.
      - name: Upgrade ETA from source
        if: ${{ !startsWith(github.ref, 'refs/heads/rel') && !startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo "Upgrading ETA because github.ref = ${{ github.ref }} (not a release)"
          git clone https://github.com/voxel51/eta eta --depth 1 --branch develop
          cd eta
          python setup.py bdist_wheel
          pip install --force-reinstall ./dist/*.whl
      - name: Install test dependencies (non-Windows)
        if: ${{ !startsWith(matrix.os, 'windows') }}
        run: |
          pip install pytest tensorflow tensorflow-datasets torch torchvision
      # obtained from "Windows, pip" instructions at
      # https://pytorch.org/get-started/locally/ - unaware of a way to update
      # the version number automatically, but tests on other platforms should
      # hopefully catch any relevant PyTorch incompatibilities even if the
      # PyTorch version used on Windows is not the latest
      - name: Install test dependencies (Windows)
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: |
          pip install pytest tensorflow tensorflow-datasets
          pip install torch==1.6.0+cpu torchvision==0.7.0+cpu -f https://download.pytorch.org/whl/torch_stable.html
      - name: Configure fiftyone for tests
        id: test_config
        run: |
          python tests/utils/setup_config.py
          python tests/utils/github_actions_flags.py
      # Important: use pytest_wrapper.py instead of pytest directly to ensure
      # that services shut down cleanly and do not conflict with steps later in
      # this workflow
      - name: Run tests
        run: |
          python tests/utils/pytest_wrapper.py tests/ --verbose --ignore tests/benchmarking/ --ignore tests/isolated/ --ignore tests/utils/ --ignore tests/import_export/
      # Intended to run even if the tests above failed (todo: don't run if the
      # tests were skipped due to an earlier step failing?)
      - name: Run isolated tests
        if: success() || failure()
        run: |
          find tests/isolated/ -name '*.py' -print0 | xargs -0 --verbose -n1 python tests/utils/pytest_wrapper.py --verbose
      # these are somewhat slower/more bandwidth-intensive, so only run them if
      # github_actions_flags.py determined that they should be run
      - name: Test quickstarts
        if: ${{ steps.test_config.outputs.run_integration == 'true' }}
        env:
          PYTHONUNBUFFERED: 1
        run: |
          python tests/utils/command_wrapper.py fiftyone quickstart
          python tests/utils/command_wrapper.py fiftyone quickstart --video

  all-tests:
    needs: test
    if: always()
    runs-on: ubuntu-latest
    steps:
      - run: sh -c ${{ needs.test.result == 'success' }}

  publish:
    needs: [build, check, test]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-18.04
    steps:
      - name: Download wheel
        uses: actions/download-artifact@v2
        with:
          name: wheel
          path: downloads
      - name: Install dependencies
        run: |
          pip3 install twine
      - name: Upload to pypi.voxel51.com
        env:
          TWINE_USERNAME: voxel51-ci
          TWINE_PASSWORD: ${{ secrets.FIFTYONE_GITHUB_TOKEN }}
          TWINE_NON_INTERACTIVE: 1
        run: |
          python3 -m twine upload --repository-url https://pypi.voxel51.com downloads/*.whl
