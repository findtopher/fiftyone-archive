"""
PyTorch Lightning Flash utilities.

| Copyright 2017-2021, Voxel51, Inc.
| `voxel51.com <https://voxel51.com/>`_
|
"""
import inspect

import eta.core.utils as etau

import fiftyone.core.metadata as fom
import fiftyone.core.utils as fou

fou.ensure_lightning_flash()
import flash.core.classification as fc
import flash.image.detection.serialization as fds
import flash.image.detection.model as fdm
import flash.image.segmentation.serialization as fss
import flash.image.segmentation.model as fsm


_SUPPORTED_TASKS = [
    fc.ClassificationTask,
    fdm.ObjectDetector,
    fsm.SemanticSegmentation,
]


def apply_flash_model(
    samples,
    model,
    label_field="predictions",
    confidence_thresh=None,
    store_logits=False,
):
    """Applies the given ``flash.core.model.Task`` to the samples in the
    collection.

    Args:
        samples: a :class:`fiftyone.core.collections.SampleCollection`
        model: a ``flash.core.model.Task``
        label_field ("predictions"): the name of the field in which to store
            the model predictions. When performing inference on video frames,
            the "frames." prefix is optional
        confidence_thresh (None): an optional confidence threshold to apply to
            any applicable labels generated by the model
        store_logits (False): whether to store logits for the model
            predictions. This is only supported when the provided ``model`` has
            logits
    """
    serializer = _get_serializer(model, confidence_thresh, store_logits,)
    with fou.SetAttributes(model, serializer=serializer):
        filepaths = samples.values("filepath")
        predictions = model.predict(filepaths)

        # Temporary until detections can be normalized in the serializer
        if isinstance(serializer, fds.FiftyOneDetectionLabels):
            normalize_detections(filepaths, predictions)

        samples.set_values(label_field, predictions)


def is_flash_model(model):
    """Determines whether the given model is a ``flash.core.model.Task``.

    Args:
        model: the model instance

    Returns:
        True/False
    """
    for cls in inspect.getmro(type(model)):
        if etau.get_class_name(cls) == "flash.core.model.Task":
            return True

    return False


def normalize_detections(filepaths, predictions):
    """Converts the bounding boxes of the provided
    :class:`fiftyone.core.labels.Detections` from absolute to relative
    coordinates.

    Args:
        filepaths: a list of filepaths
        predictions: a list of :class:`fiftyone.core.labels.Detections`
    """
    for filepath, prediction in zip(filepaths, predictions):
        metadata = fom.ImageMetadata.build_for(filepath)
        width = metadata.width
        height = metadata.height
        for detection in prediction.detections:
            x, y, w, h = detection.bounding_box
            detection.bounding_box = [
                x / width,
                y / height,
                w / width,
                h / height,
            ]


def _get_serializer(model, confidence_thresh, store_logits):
    if isinstance(model, fc.ClassificationTask):
        prev_args = dict(inspect.getmembers(model.serializer))

        kwargs = {
            "multi_label": prev_args.get("multi_label", False),
            "store_logits": store_logits,
        }

        if "threshold" in prev_args:
            kwargs["threshold"] = prev_args["threshold"]

        if confidence_thresh is not None:
            kwargs["threshold"] = confidence_thresh

        return fc.FiftyOneLabels(**kwargs)

    if isinstance(model, fdm.ObjectDetector):
        return fds.FiftyOneDetectionLabels()

    if isinstance(model, fsm.SemanticSegmentation):
        return fss.FiftyOneSegmentationLabels()

    raise ValueError(
        "Unsupported model type %s. Supported model types are %s"
        % (type(model), _SUPPORTED_TASKS)
    )
