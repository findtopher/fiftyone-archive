"""
PyTorch Lightning Flash utilities.

| Copyright 2017-2021, Voxel51, Inc.
| `voxel51.com <https://voxel51.com/>`_
|
"""
import logging

import fiftyone.core.labels as fol
import fiftyone.core.utils as fou

fou.ensure_lightning_flash()
import flash
from flash.core.classification import (
    ClassificationSerializer,
    ClassificationTask,
    FiftyOneLabels,
)


logger = logging.getLogger(__name__)


_SUPPORTED_TASKS = [
    ClassificationTask,
]


def apply_flash_model(
    samples,
    model,
    label_field="predictions",
    confidence_thresh=None,
    store_logits=False,
    batch_size=None,
    num_workers=None,
    skip_failures=True,
):
    """Applies the given ``flash.core.model.Task`` to the samples in the 
    collection.

    This method supports all the following cases:

    -   Applying an image model to an image collection
    -   Applying an image model to the frames of a video collection
    -   Applying a video model to a video collection

    Args:
        samples: a :class:`fiftyone.core.collections.SampleCollection`
        model: a ``flash.core.model.Task``
        label_field ("predictions"): the name of the field in which to store
            the model predictions. When performing inference on video frames,
            the "frames." prefix is optional
        confidence_thresh (None): an optional confidence threshold to apply to
            any applicable labels generated by the model
        store_logits (False): whether to store logits for the model
            predictions. This is only supported when the provided ``model`` has
            logits
        batch_size (None): an optional batch size to use. Only applicable for
            image samples
        num_workers (None): the number of workers to use when loading images.
            Only applicable for Torch models
        skip_failures (True): whether to gracefully continue without raising an
            error if predictions cannot be generated for a sample
    """
    serializer = _get_fo_serializer(model, confidence_thresh)
    model.serializer = serializer
    with fou.ProgressBar() as pb:
        for sample in pb(samples):
            preds = model.predict(sample.filepath)
            sample[label_field] = preds[0]
            sample.save()


def _get_fo_serializer(model, confidence_thresh):
    """Initializes the FiftyOne serializer to be used for the given task"""
    previous_serializer = model.serializer
    if isinstance(model, ClassificationTask):
        multi_label = False
        if isinstance(previous_serializer, ClassificationSerializer):
            multi_label = previous_serializer.multi_label

        return FiftyOneLabels(
            multi_label=multi_label, threshold=confidence_thresh
        )

    else:
        raise ValueError(
            "Found an unsupported model of type %s. Supported model types are "
            "%s"
            % (type(model), ", ".join([t.__name__ for t in _SUPPORTED_TASKS]))
        )
