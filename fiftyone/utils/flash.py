"""
PyTorch Lightning Flash utilities.

| Copyright 2017-2021, Voxel51, Inc.
| `voxel51.com <https://voxel51.com/>`_
|
"""
import inspect
import logging

import fiftyone.core.labels as fol
from fiftyone.core.metadata import ImageMetadata
import fiftyone.core.utils as fou

import eta.core.utils as etau

fcc = fou.lazy_import("flash.core.classification")


logger = logging.getLogger(__name__)


_SUPPORTED_TASKS = [
    "ClassificationTask",
]


def apply_flash_model(
    samples,
    model,
    label_field="predictions",
    confidence_thresh=None,
    store_logits=False,
    batch_size=None,
    num_workers=None,
    skip_failures=True,
):
    """Applies the given ``flash.core.model.Task`` to the samples in the 
    collection.

    Args:
        samples: a :class:`fiftyone.core.collections.SampleCollection`
        model: a ``flash.core.model.Task``
        label_field ("predictions"): the name of the field in which to store
            the model predictions. When performing inference on video frames,
            the "frames." prefix is optional
        confidence_thresh (None): an optional confidence threshold to apply to
            any applicable labels generated by the model
        store_logits (False): whether to store logits for the model
            predictions. This is only supported when the provided ``model`` has
            logits
        batch_size (None): an optional batch size to use. Only applicable for
            image samples
        num_workers (None): the number of workers to use when loading images.
            Only applicable for Torch models
        skip_failures (True): whether to gracefully continue without raising an
            error if predictions cannot be generated for a sample
    """
    if batch_size is not None:
        logger.info("Flash models only support the default batch size")

    serializer = _get_fo_serializer(model, confidence_thresh, store_logits,)
    with fou.SetAttributes(model, serializer=serializer):
        predictions = model.predict(samples.values("filepath"))
        samples.set_values(label_field, predictions)


def is_flash_model(model):
    """Checks model type to determine if it is a flash model

    Args:
        model: the model instance to check
    """
    model_class = type(model)
    mro = inspect.getmro(model_class)
    for c in mro:
        class_name = etau.get_class_name(c)
        if class_name == "flash.core.model.Task":
            return True

    return False


def normalize_detections(filepaths, predictions):
    """Converts Detections from absolute to relative coordinates

    Args:
	filepaths: paths to the related images for every Detection used to generate metadata
        predictions: the list of Detections to normalize 
    """
    for filepath, prediction in zip(filepaths, predictions):
        metadata = ImageMetadata.build_for(filepath)
        width = metadata.width
        height = metadata.height
        for detection in prediction.detections:
            x, y, w, h = detection.bounding_box
            detection.bounding_box = [
                x / width,
                y / height,
                w / width,
                h / height,
            ]


def _get_fo_serializer(model, confidence_thresh, store_logits):
    """Initializes the FiftyOne serializer to be used for the given task"""
    previous_serializer = model.serializer
    if isinstance(model, fcc.ClassificationTask):
        prev_args = dict(inspect.getmembers(model.serializer))
        multi_label = prev_args.get("multi_label", False)

        kwargs = {
            "multi_label": multi_label,
            "store_logits": store_logits,
        }

        if confidence_thresh is None and "threshold" in prev_args:
            kwargs["threshold"] = prev_args["threshold"]

        if confidence_thresh is not None:
            kwargs["threshold"] = confidence_thresh

        return fcc.FiftyOneLabels(**kwargs)

    else:
        raise ValueError(
            "Found an unsupported model of type %s. Supported model types are "
            "%s" % (type(model), ", ".join(_SUPPORTED_TASKS))
        )
